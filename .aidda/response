  
File: /home/stevegt/lab/markproc/main_test.go
```go
package main

import (
	"bytes"
	"os/exec"
	"strings"
	"testing"

	. "github.com/stevegt/goadapt"
)

func TestPassMkExterns(t *testing.T) {
	lines := []string{
		"[ref1]: A bibliographic reference.",
		"No externs here.",
	}
	expectedLines := []string{
		`<a name="ref1"></a>`,
		`[ref1]: A bibliographic reference.`,
		"No externs here.",
	}

	result := passMkExterns(lines)
	if !reflect.DeepEqual(result, expectedLines) {
		t.Errorf("passMkExterns failed:\nwant: %v\nhave: %v", expectedLines, result)
	}
}

func TestPassMkHeads(t *testing.T) {
	lines := []string{
		"# Top-Level Header",
		"This is a paragraph.",
		"## Sub-Level Header",
	}
	expectedLines := []string{
		`<a name="sec1"></a>`,
		`# 1. Top-Level Header`,
		"This is a paragraph.",
		`<a name="sec1_1"></a>`,
		`## 1.1. Sub-Level Header`,
	}

	result := passMkHeads(lines)
	if !reflect.DeepEqual(result, expectedLines) {
		t.Errorf("passMkHeads failed:\nwant: %v\nhave: %v", expectedLines, result)
	}
}

func TestPassLinkExterns(t *testing.T) {
	lines := []string{
		"This is a [reference] to something.",
		"This is a [sec fooee] reference.",
		"No refs here.",
	}
	expectedLines := []string{
		"This is a [<a href=\"#reference\">reference</a>] to something.",
		"This is a [sec fooee] reference.",
		"No refs here.",
	}

	result := passLinkExterns(lines)
	if !reflect.DeepEqual(result, expectedLines) {
		t.Errorf("passLinkExterns failed:\nwant: %v\nhave: %v", expectedLines, result)
	}
}

func TestPassLinkHeads(t *testing.T) {
	lines := []string{
		"This is a [reference] to something.",
		"This is a [sec fooee] reference.",
		"No refs here.",
		`<a name="sec1"></a>`,
		`## 1. Title`,
		`<a name="sec2_3"></a>`,
		`## 2.3. Fun Object Overtone`,
		`<a name="sec7_9">`,
		`</a>## 7.9. Something`,
	}
	expectedLines := []string{
		"This is a [reference] to something.",
		"This is a [<a href=\"#sec2_3\">sec 2.3</a>] reference.",
		"No refs here.",
		`<a name="sec1"></a>`,
		`## 1. Title`,
		`<a name="sec2_3"></a>`,
		`## 2.3. Fun Object Overtone`,
		`<a name="sec7_9">`,
		`</a>## 7.9. Something`,
	}

	result := passLinkHeads(lines)
	if !reflect.DeepEqual(result, expectedLines) {
		t.Errorf("\nwant: %v\nhave: %v", expectedLines, result)
	}
}

func TestVerify(t *testing.T) {
	lines := []string{
		`<a name="sec1"></a>`,
		`# 1. Title`,
		`<a href="#sec1">link to title</a>`,
		`<a href="#missing">link to missing</a>`,
		`<a name="sec1"></a>`,
	}

	err := verify(lines)
	Tassert(t, err != nil, "verify did not catch any errors")

	lines = []string{
		`<a name="sec1"></a>`,
		`# 1. Title`,
		`<a href="#sec1">link to title</a>`,
		`<a href="http://example.com">link to example</a>`,
	}

	err = verify(lines)
	Tassert(t, err == nil, "verify failed: %v", err)
}

func TestMarkdownPreprocessor(t *testing.T) {
	input := `# A Top-Level Header

This is the first section.

## A Sub-Level Header

This is a reference to the Section One heading [sec top].

Reference to the anchor below [ref1].

## References

[ref1]: A bibliographic reference.`

	expectedOutput := `<a name="sec1"></a>
# 1. A Top-Level Header

This is the first section.

<a name="sec1_1"></a>
## 1.1. A Sub-Level Header

This is a reference to the Section One heading [<a href="#sec1">sec 1</a>].

Reference to the anchor below [<a href="#ref1">ref1</a>].

<a name="sec1_2"></a>
## 1.2. References

<a name="ref1"></a>
[ref1]: A bibliographic reference.`

	cmd := exec.Command("go", "run", "main.go")
	cmd.Stdin = bytes.NewReader([]byte(input))

	output, err := cmd.CombinedOutput()
	if err != nil {
		t.Fatalf("cmd.Run() failed with %s\n", err)
	}

	actualOutput := string(output)
	// line-by-line comparison
	wantLines := strings.Split(expectedOutput, "\n")
	haveLines := strings.Split(actualOutput, "\n")
	for i, want := range wantLines {
		if i >= len(haveLines) {
			t.Errorf("output is shorter than expected")
			break
		}
		if want != haveLines[i] {
			t.Errorf("line %d:\nwant: %q\nhave: %q", i, want, haveLines[i])
		}
	}
}

func TestComplexSectionStructure(t *testing.T) {
	input := []byte(`
# Section 1
## Section 1.1
### Section 1.1.1
#### Section 1.1.1.1
##### Section 1.1.1.1.1
## Section 1.2
### Section 1.2.1
## Section 1.3
## Section 1.4
### Section 1.4.1
## Section 1.5
# Section 2
## Section 2.1
### Section 2.1.1
## Section 2.2
## Section 2.3
# Section 3
## Section 3.1
### Section 3.1.1
## Section 3.2
# Section 4
## Section 4.1
### Section 4.1.1
#### Section 4.1.1.1
##### Section 4.1.1.1.1
## Section 4.2
### Section 4.2.1
# Section 5
### Section 5.1
#### Section 5.1.1
##### Section 5.1.1.1
## Section 5.2
### Section 5.2.1
# Section 6
## Section 6.1
## Section 6.2
### Section 6.2.1
# Section 7
## Section 7.1
### Section 7.1.1
# Section 8
## Section 8.1
### Section 8.1.1
#### Section 8.1.1.1
##### Section 8.1.1.1.1
## Section 8.2
### Section 8.2.1
# Section 9
## Section 9.1
### Section 9.1.1
# Section 10
## Section 10.1
### Section 10.1.1
#### Section 10.1.1.1
##### Section 10.1.1.1.1`)

	expectedOutput := `<a name="sec1"></a>
# 1. Section 1
<a name="sec1_1"></a>
## 1.1. Section 1.1
<a name="sec1_1_1"></a>
### 1.1.1. Section 1.1.1
<a name="sec1_1_1_1"></a>
#### 1.1.1.1. Section 1.1.1.1
<a name="sec1_1_1_1_1"></a>
##### 1.1.1.1.1. Section 1.1.1.1.1
<a name="sec1_2"></a>
## 1.2. Section 1.2
<a name="sec1_2_1"></a>
### 1.2.1. Section 1.2.1
<a name="sec1_3"></a>
## 1.3. Section 1.3
<a name="sec1_4"></a>
## 1.4. Section 1.4
<a name="sec1_4_1"></a>
### 1.4.1. Section 1.4.1
<a name="sec1_5"></a>
## 1.5. Section 1.5
<a name="sec2"></a>
# 2. Section 2
<a name="sec2_1"></a>
## 2.1. Section 2.1
<a name="sec2_1_1"></a>
### 2.1.1. Section 2.1.1
<a name="sec2_2"></a>
## 2.2. Section 2.2
<a name="sec2_3"></a>
## 2.3. Section 2.3
<a name="sec3"></a>
# 3. Section 3
<a name="sec3_1"></a>
## 3.1. Section 3.1
<a name="sec3_1_1"></a>
### 3.1.1. Section 3.1.1
<a name="sec3_2"></a>
## 3.2. Section 3.2
<a name="sec4"></a>
# 4. Section 4
<a name="sec4_1"></a>
## 4.1. Section 4.1
<a name="sec4_1_1"></a>
### 4.1.1. Section 4.1.1
<a name="sec4_1_1_1"></a>
#### 4.1.1.1. Section 4.1.1.1
<a name="sec4_1_1_1_1"></a>
##### 4.1.1.1.1. Section 4.1.1.1.1
<a name="sec4_2"></a>
## 4.2. Section 4.2
<a name="sec4_2_1"></a>
### 4.2.1. Section 4.2.1
<a name="sec5"></a>
# 5. Section 5
<a name="sec5_1"></a>
### 5.1. Section 5.1
<a name="sec5_1_1"></a>
#### 5.1.1. Section 5.1.1
<a name="sec5_1_1_1"></a>
##### 5.1.1.1. Section 5.1.1.1
<a name="sec5_2"></a>
## 5.2. Section 5.2
<a name="sec5_2_1"></a>
### 5.2.1. Section 5.2.1
<a name="sec6"></a>
# 6. Section 6
<a name="sec6_1"></a>
## 6.1. Section 6.1
<a name="sec6_2"></a>
## 6.2. Section 6.2
<a name="sec6_2_1"></a>
### 6.2.1. Section 6.2.1
<a name="sec7"></a>
# 7. Section 7
<a name="sec7_1"></a>
## 7.1. Section 7.1
<a name="sec7_1_1"></a>
### 7.1.1. Section 7.1.1
<a name="sec8"></a>
# 8. Section 8
<a name="sec8_1"></a>
## 8.1. Section 8.1
<a name="sec8_1_1"></a>
### 8.1.1. Section 8.1.1
<a name="sec8_1_1_1"></a>
#### 8.1.1.1. Section 8.1.1.1
<a name="sec8_1_1_1_1"></a>
##### 8.1.1.1.1. Section 8.1.1.1.1
<a name="sec8_2"></a>
## 8.2. Section 8.2
<a name="sec8_2_1"></a>
### 8.2.1. Section 8.2.1
<a name="sec9"></a>
# 9. Section 9
<a name="sec9_1"></a>
## 9.1. Section 9.1
<a name="sec9_1_1"></a>
### 9.1.1. Section 9.1.1
<a name="sec10"></a>
# 10. Section 10
<a name="sec10_1"></a>
## 10.1. Section 10.1
<a name="sec10_1_1"></a>
### 10.1.1. Section 10.1.1
<a name="sec10_1_1_1"></a>
#### 10.1.1.1. Section 10.1.1.1
<a name="sec10_1_1_1_1"></a>
##### 10.1.1.1.1. Section 10.1.1.1.1`

	cmd := exec.Command("go", "run", "main.go")
	cmd.Stdin = bytes.NewReader(input)

	output, err := cmd.CombinedOutput()
	if err != nil {
		t.Fatalf("cmd.Run() failed with %s\n", err)
	}

	actualOutput := string(output)
	// line-by-line comparison
	wantLines := strings.Split(expectedOutput, "\n")
	haveLines := strings.Split(actualOutput, "\n")
	for i, want := range wantLines {
		if i >= len(haveLines) {
			t.Errorf("output is shorter than expected")
			break
		}
		if want != haveLines[i] {
			t.Errorf("line %d:\nwant: %q\nhave: %q", i, want, haveLines[i])
		}
	}
}

```
EOF_/home/stevegt/lab/markproc/main_test.go

File: /home/stevegt/lab/markproc/testdata/sections-in.md
```markdown
# Section 1
## Section 1.1
### Section 1.1.1
#### Section 1.1.1.1
##### Section 1.1.1.1.1
## Section 1.2
### Section 1.2.1
## Section 1.3
## Section 1.4
### Section 1.4.1
## Section 1.5
# Section 2
## Section 2.1
### Section 2.1.1
## Section 2.2
## Section 2.3
# Section 3
## Section 3.1
### Section 3.1.1
## Section 3.2
# Section 4
## Section 4.1
### Section 4.1.1
#### Section 4.1.1.1
##### Section 4.1.1.1.1
## Section 4.2
### Section 4.2.1
# Section 5
### Section 5.1
#### Section 5.1.1
##### Section 5.1.1.1
## Section 5.2
### Section 5.2.1
# Section 6
## Section 6.1
## Section 6.2
### Section 6.2.1
# Section 7
## Section 7.1
### Section 7.1.1
# Section 8
## Section 8.1
### Section 8.1.1
#### Section 8.1.1.1
##### Section 8.1.1.1.1
## Section 8.2
### Section 8.2.1
# Section 9
## Section 9.1
### Section 9.1.1
# Section 10
## Section 10.1
### Section 10.1.1
#### Section 10.1.1.1
##### Section 10.1.1.1.1

```
EOF_/home/stevegt/lab/markproc/testdata/sections-in.md